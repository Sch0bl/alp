--  suc :: Nat -> Nat
def succ = \x:Nat. 
    suc x

--  pred :: Nat -> Nat
def pred = \n:Nat.
    R 0 (\r:Nat.\y:Nat.y) n

--  recAck :: (Nat -> Nat) -> Nat -> (Nat -> Nat)
def recAck = \r:Nat->Nat. \y:Nat. 
    (\n:Nat. R (r (suc 0)) (\u:Nat.\x:Nat. r u) n)

--  ack :: Nat -> (Nat -> Nat)
def ack = \m:Nat. 
    R succ recAck m 